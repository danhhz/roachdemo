// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/css/default.css (73B)
// assets/css/demo.css (493B)
// assets/js/demo.jsx (13.022kB)
// assets/templates/cluster.html (3.696kB)
// assets/templates/demo.html (1.434kB)
// assets/templates/error.html (1.258kB)
// assets/templates/layout.html (2.118kB)
// assets/templates/log.html (221B)
// assets/templates/node.html (3.814kB)
// assets/templates/notfound.html (1.262kB)
// assets/templates/run.html (1.766kB)

package main

import (
	"crypto/sha256"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

// assetsCssDefaultCss reads file data from disk. It returns an error on failure.
func assetsCssDefaultCss() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/css/default.css"
	name := "assets/css/default.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsCssDemoCss reads file data from disk. It returns an error on failure.
func assetsCssDemoCss() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/css/demo.css"
	name := "assets/css/demo.css"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsJsDemoJsx reads file data from disk. It returns an error on failure.
func assetsJsDemoJsx() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/js/demo.jsx"
	name := "assets/js/demo.jsx"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesClusterHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesClusterHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/cluster.html"
	name := "assets/templates/cluster.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesDemoHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesDemoHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/demo.html"
	name := "assets/templates/demo.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesErrorHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesErrorHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/error.html"
	name := "assets/templates/error.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesLayoutHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesLayoutHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/layout.html"
	name := "assets/templates/layout.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesLogHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesLogHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/log.html"
	name := "assets/templates/log.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesNodeHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesNodeHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/node.html"
	name := "assets/templates/node.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesNotfoundHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesNotfoundHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/notfound.html"
	name := "assets/templates/notfound.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// assetsTemplatesRunHtml reads file data from disk. It returns an error on failure.
func assetsTemplatesRunHtml() (*asset, error) {
	path := "/Users/dan/crdb/roachdemo/assets/templates/run.html"
	name := "assets/templates/run.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/css/default.css": assetsCssDefaultCss,

	"assets/css/demo.css": assetsCssDemoCss,

	"assets/js/demo.jsx": assetsJsDemoJsx,

	"assets/templates/cluster.html": assetsTemplatesClusterHtml,

	"assets/templates/demo.html": assetsTemplatesDemoHtml,

	"assets/templates/error.html": assetsTemplatesErrorHtml,

	"assets/templates/layout.html": assetsTemplatesLayoutHtml,

	"assets/templates/log.html": assetsTemplatesLogHtml,

	"assets/templates/node.html": assetsTemplatesNodeHtml,

	"assets/templates/notfound.html": assetsTemplatesNotfoundHtml,

	"assets/templates/run.html": assetsTemplatesRunHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"default.css": &bintree{assetsCssDefaultCss, map[string]*bintree{}},
			"demo.css":    &bintree{assetsCssDemoCss, map[string]*bintree{}},
		}},
		"js": &bintree{nil, map[string]*bintree{
			"demo.jsx": &bintree{assetsJsDemoJsx, map[string]*bintree{}},
		}},
		"templates": &bintree{nil, map[string]*bintree{
			"cluster.html":  &bintree{assetsTemplatesClusterHtml, map[string]*bintree{}},
			"demo.html":     &bintree{assetsTemplatesDemoHtml, map[string]*bintree{}},
			"error.html":    &bintree{assetsTemplatesErrorHtml, map[string]*bintree{}},
			"layout.html":   &bintree{assetsTemplatesLayoutHtml, map[string]*bintree{}},
			"log.html":      &bintree{assetsTemplatesLogHtml, map[string]*bintree{}},
			"node.html":     &bintree{assetsTemplatesNodeHtml, map[string]*bintree{}},
			"notfound.html": &bintree{assetsTemplatesNotfoundHtml, map[string]*bintree{}},
			"run.html":      &bintree{assetsTemplatesRunHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
